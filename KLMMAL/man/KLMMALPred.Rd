% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KLMMALPred.R
\name{KLMMALPred}
\alias{KLMMALPred}
\title{Genetic Risk Prediction Using a Multi-Kernel Linear Mixed Model with Adaptive Lasso}
\usage{
KLMMALPred(Data, method = "NR", lambdaall = NULL, stdK = TRUE,
  tol = 1e-06, tolK = 1e-06, stepmax = 300)
}
\arguments{
\item{Data}{The input data prepared by \code{ReadKLMM}.}

\item{method}{Newton-Raphson(NR) or Expectation-Maximization(EM). Default is \code{NR}.}

\item{lambdaall}{The vector of tuning parameters, and default is \code{NULL}.}

\item{stdK}{A bool indicating whether the GSMs should be standardized, and default is \code{TRUE}.}

\item{tol}{The tolerance level, and default is \code{1e-6}.}

\item{tolK}{The tolerance level of SVD decomposition, and default is \code{1e-6}.}

\item{stepmax}{Maximum number of steps for the algorithms to run, and default is \code{300}.}
}
\value{
A list that contains two elements (MLE and Pred). The Pred element stores the predicted values for the individuals in the testing samples (i.e. not in the \code{train.index}),
The MLE element contains \code{paras}: parameter estimates for each genomic region, \code{sigma2}: variance estimates,
\code{beta}: parameter estimates for demographic variables (i.e. \code{X}), \code{lambda}: the selected tuning parameters,
\code{allzero}: indicating whether a gBLUP model has been fitted (if \code{TRUE}, then a gBLUP model is fit.
}
\description{
\code{KLMMALPred} analyses the data prepared by \code{ReadKLMM} and predict the outcome values based on Multi-Kernel Linear Mixed Model with Adaptive Lasso method
}
\details{
This function is used to predict phenotype using the Multi-Kernel Linear Mixed Model with Adaptive Lasso method.
}
\examples{
## We recommend to use "NR" unless your sample size is very small ##
## EM can take a long time if the number of regions is large or the sample size is relatively moderate # 
 
## Eg1: read both genotype and phenotype files from the disk, calculate the GSMs using linear kernels, and get the predicted values ##
trainID=read.table(system.file("extdata", "TrainID.txt", package = "KLMMAL"));
annotation=read.table(system.file("extdata", "Annotation.txt", package = "KLMMAL"),header=T);
Data=ReadKLMM(bed=system.file("extdata", "testing.bed", package = "KLMMAL"),trainID=trainID[,1], annotation = annotation, phenofile=system.file("extdata", "pheno.txt", package = "KLMMAL"), kernels = c("linear"), AllRegions = 0);
Result1=KLMMALPred(Data,method="NR");
print(cor(Result1$Pred,Data$Y[-Data$train.index]))
Result2=KLMMALPred(Data,method="EM", lambdaall=c(0,0.1,0.2)); # don't run, can take a very long time #

## Eg2: read both genotype and phenotype files from the disk, and calculate the GSMs using both linear and poly2 kernels ##
trainID=read.table(system.file("extdata", "TrainID.txt", package = "KLMMAL"));
annotation=read.table(system.file("extdata", "Annotation.txt", package = "KLMMAL"),header=T);
Data=ReadKLMM(bed=system.file("extdata", "testing.bed", package = "KLMMAL"),trainID=trainID[,1], annotation = annotation, phenofile=system.file("extdata", "pheno.txt", package = "KLMMAL"), kernels = c("linear","poly2"), AllRegions = 0);
Result2=KLMMALPred(Data,method="NR")
print(cor(Result2$Pred,Data$Y[-Data$train.index]))

## Eg3: use pre-calculated GSMs
load(system.file("extdata", "Data.rda", package = "KLMMAL"))
Result3=KLMMALPred(Data,method="NR")
print(cor(Result3$Pred,Data$Y[-Data$train.index]))

}
